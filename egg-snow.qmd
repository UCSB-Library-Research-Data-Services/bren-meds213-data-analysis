---
title: "egg-snow"
format: html
---


```{r, message=FALSE}
library(tidyverse)
library(lubridate)
library(RColorBrewer)
```


## Define path and filenames

```{r}
path_raw <- "data/raw"

sites_csv <- "site.csv"

snowcover_csv <- "snow_cover.csv"

nests_csv <- "ASDN_Bird_nests.csv"

eggs_csv <- "ASDN_Bird_eggs.csv"

lemmings_csv <- "ASDN_Daily_pred_lemm.csv"

species_csv <- "species.csv"

```

## Import data

```{r}

sites_data <- read_csv(file.path(path_raw, sites_csv))




eggs_data <- read_csv(file.path(path_raw, eggs_csv))

lemmings_data <- read_csv(file.path(path_raw, lemmings_csv))

species_data <- read_csv(file.path(path_raw, species_csv))

```

## Summarize the nests table

Read the nest data in

```{r}
nests_data <- read_csv(file.path(path_raw, nests_csv))
glimpse(nests_data)
```

Yeah! `Date_found` is already in date format!


```{r}
nests_month <- nests_data %>%
  mutate(Month = month(Date_found)) %>%
  group_by(Species, Site, Year, Month) %>%
  summarize(n_nest = n())
```

## Summarize the snow cover table

Read the snow cover data in

```{r}
snowcover_data <- read_csv(file.path(path_raw, snowcover_csv))
```


First we need to transform the date in date format and compute the monthly aggregate

```{r}
snowcover_data_fixed <- snowcover_data %>%
  mutate(snow_days = ifelse(Snow_cover > 10, 1, 0),
         Date2 = as_date(Date))
```

We have 72 errors. Let's have a look at the date which failed

```{r}
snowcover_data_fixed %>% 
  filter(is.na(Date2)) %>% 
  View()
```


It is because 2 days were entered `8&9 june 06`, but we know if was in June, so let's add this

```{r}
snowcover_data_fixed <- snowcover_data_fixed %>%
  mutate(Date2 = ifelse(is.na(Date2),  dmy("08/06/06"), Date2))

snowcover_data_fixed
```

Mmm the Dates are not what we were expecting... It generally means there are different date types. Let's start by fixing the problematic dates before transforming it to the date format.

```{r}
snowcover_data_fixed <- snowcover_data %>%
  mutate(Date = ifelse(Date == "8&9 june 06", "8 june 06", Date),
         Date2 = dmy(Date))
```


Now lets compute the monthly statistics

```{r}
# adding the snow days with a threshold at 10%
snowcover_month <- snowcover_data_fixed %>%
  mutate(snow_days = ifelse(Snow_cover > 10, 1, 0), 
         Month = month(Date2)) %>%
  group_by(Site, Year, Month) %>%
  summarise(cum_snow_days = sum(snow_days, na.rm=TRUE),
            avg_snow_cover = mean(Snow_cover, na.rm=TRUE)) %>%
  ungroup()
```

 
## Join the two

```{r}
nests_snow_month <- nests_month %>%
  inner_join(snowcover_month, join_by(Site, Year, Month))

names(nests_snow)
```

Well in the end we did not have much information by months (mainly 2 months per year focused on June and July), so let's aggregate by year instead:

```{r}
nests_snow_year <- nests_snow_month %>%
  group_by(Species, Site, Year) %>%
  summarise(cum_snow_days = sum(cum_snow_days, na.rm=TRUE),
            avg_snow_cover = mean(avg_snow_cover, na.rm=TRUE),
            n_nest = sum(n_nest, na.rm=TRUE)
            )
```


```{r}
ggplot(nests_snow_year, aes(x=cum_snow_days, y=n_nest , color=Species)) + 
  geom_point() +
  scale_colour_brewer(palette = "Set3") +
  ggtitle("Number of eggs vs cummulative snow days") #+
  # facet_wrap(vars(Year), scales = "free")
```

```{r}
ggplot(nests_snow_year, aes(x=avg_snow_cover, y=n_nest , color=Species)) + 
  geom_point() +
  scale_colour_brewer(palette = "Set3")+ 
  ggtitle("Number of eggs vs avg snow cover")#+
  # facet_wrap(vars(Year), scales = "free")
```


```{r}
lemming_sum <- lemmings_data %>%
  group_by(Site, Year, Species) %>%
  summarize(n_lemmings = n())
```

try by species of bird vs lemming

```{r}
nest_lemm <- nests_sum %>%
  inner_join(lemming_sum, join_by(Site, Year))

names(nest_lemm)
```



```{r}
ggplot(nest_lemm, aes(x=n_lemmings, y=n_nest , color=Species.x)) + 
  geom_point()
```

## Which species makes the most eggs

```{r}
eggs_sum <- eggs_data %>%
  group_by(Site, Year, Nest_ID) %>%
  summarize(n_egg = max(Egg_num)) %>%
  ungroup()
```


```{r}
nest_species <- eggs_sum %>%
  left_join(nests_data, join_by(Site, Year, Nest_ID))
```


```{r}
nest_species_avg <- nest_species %>%
  group_by(Species) %>%
  summarise(avg_egg_numb = mean(n_egg))

nest_species_avg %>%
  arrange(desc(avg_egg_numb))
```

```{r}
nest_species_avg <- nest_species_avg %>%
  left_join(species_data, join_by(Species==Code))
```


```{r}
nest_species_avg %>% 
  select(-Relevance) %>%
  relocate(avg_egg_numb, .after = last_col()) %>%
  arrange(desc(avg_egg_numb))
```

